package org.example.server;

import javafx.application.Platform;
import org.apache.logging.log4j.LogManager;
import org.apache.logging.log4j.Logger;
import org.example.lobby.Model;

import java.io.*;
import java.net.Socket;
import java.net.SocketException;
import java.util.List;

public class ClientHandler implements Runnable {
    private final Socket socket;
    private final BufferedReader reader;
    private final BufferedWriter writer;
    private String username;
    private final List<ClientHandler> connectedClients;
    private final UsernameManager usernameManager;
    private final Model model;
    static Logger logger = LogManager.getLogger(ClientHandler.class);

    public ClientHandler(Socket socket, List<ClientHandler> connectedClients, UsernameManager usernameManager, Model model) throws IOException {
        this.socket = socket;
        this.reader = new BufferedReader(new InputStreamReader(socket.getInputStream()));
        this.writer = new BufferedWriter(new OutputStreamWriter(socket.getOutputStream()));
        this.connectedClients = connectedClients;
        this.usernameManager = usernameManager;
        this.model = model;  // Ensure model is properly initialized

        initializeUsername();
        broadcastMessage("SERVER: " + username + " has entered the chat.");
        logger.info("Client connected with username: {}", username);
        model.addPlayer(username); // Notify GUI
    }

    private void initializeUsername() throws IOException {
        String requestedUsername = reader.readLine().trim();
        String originalRequestedUsername = requestedUsername;

        if (!usernameManager.isUsernameAvailable(requestedUsername)) {
            writer.write("The username '" + requestedUsername + "' is not available. Please choose a different one, or press Enter for an autogenerated username: ");
            writer.newLine();
            writer.flush();
            requestedUsername = reader.readLine().trim();
            if (requestedUsername.isEmpty()) {
                requestedUsername = originalRequestedUsername;
            }
        }

        username = usernameManager.getAvailableUsername(requestedUsername);
        writer.write(username);
        writer.newLine();
        writer.flush();

        // Notify all clients of the new player
        for (ClientHandler client : connectedClients) {
            client.sendMessage("New player: " + username);
        }

        // Update lobby GUI
        updateLobbyPlayers();
    }

    @Override
    public void run() {
        try {
            String message;
            while ((message = reader.readLine()) != null) {
                if (message.startsWith("CHANGE_USERNAME ")) {
                    handleUsernameChange(message.substring(16));
                } else {
                    broadcastMessage(username + ": " + message);
                }
            }
        } catch (SocketException e) {
            logger.trace("Client disconnected unexpectedly: ", e);
        } catch (IOException e) {
            logger.trace("Error receiving message: ", e);
        } finally {
            cleanup();
        }
    }

    private void handleUsernameChange(String newUsername) {
        if (usernameManager.isUsernameAvailable(newUsername)) {
            String oldUsername = username;
            usernameManager.releaseUsername(username);
            username = usernameManager.getAvailableUsername(newUsername);

            // Notify all clients of the username change
            for (ClientHandler client : connectedClients) {
                client.sendMessage("Player " + oldUsername + " changed username to " + username);
            }

            // Update lobby GUI on JavaFX Application Thread
            Platform.runLater(() -> {
                model.removePlayer(oldUsername);
                model.addPlayer(username);
            });
        } else {
            sendMessage("SERVER: The username '" + newUsername + "' is not available. Please choose a different one.");
        }
    }

    private void broadcastMessage(String message) {
        for (ClientHandler client : connectedClients) {
            client.sendMessage(message);
        }
    }

    public void sendMessage(String message) {
        try {
            writer.write(message);
            writer.newLine();
            writer.flush();
        } catch (SocketException se) {
            logger.error("Connection to the client lost: ", se);
            cleanup();
        } catch (IOException e) {
            logger.error("Error sending message to {}: ", username, e);
        }
    }

    private void cleanup() {
        connectedClients.remove(this);
        usernameManager.releaseUsername(username);
        broadcastMessage("SERVER: " + username + " has left the chat.");
        model.removePlayer(username); // Notify GUI
        closeResources();
        logger.info("Client disconnected: {}", username);

        // Update lobby GUI
        updateLobbyPlayers();
    }

    private void closeResources() {
        try {
            if (reader != null) reader.close();
            if (writer != null) writer.close();
            if (socket != null) socket.close();
        } catch (IOException e) {
            logger.error("Error closing resources for {}: ", username, e);
        }
    }

    private void updateLobbyPlayers() {
        // Notify lobby GUI about player updates (if needed)
    }

    public String getUsername() {
        return username;
    }
}